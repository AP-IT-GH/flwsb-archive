[
    {
        "id": "25e707b9e505301b",
        "type": "tab",
        "label": "sis-form",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ccd90bc36d1b3954",
        "type": "ui_form",
        "z": "25e707b9e505301b",
        "name": "Board reg",
        "label": "",
        "group": "7b635a347ea0d3df",
        "order": 0,
        "width": "0",
        "height": "0",
        "options": [
            {
                "label": "Board ID (eui)",
                "value": "board_id",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Board Name",
                "value": "board_name",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Location latitude",
                "value": "latitude",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Location longitude",
                "value": "longitude",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "board_id": "",
            "board_name": "",
            "latitude": "",
            "longitude": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic=board",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "c1aa9da22ce27c6c",
                "a1defd5febc4e068"
            ]
        ]
    },
    {
        "id": "a1defd5febc4e068",
        "type": "function",
        "z": "25e707b9e505301b",
        "name": "Data Formatting Board reg",
        "func": "var form = msg.payload\n\nmsg.payload = [\n    {\n        board_name: form.board_name,\n        latitude: form.latitude,\n        longitude: form.longitude,\n        time: new Date()\n    },\n    {\n        board_id: form.board_id,\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 80,
        "wires": [
            [
                "44cb586a79c70d1f",
                "67c30780c95cd428"
            ]
        ]
    },
    {
        "id": "c1aa9da22ce27c6c",
        "type": "debug",
        "z": "25e707b9e505301b",
        "name": "Debug Board reg Form",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 120,
        "wires": []
    },
    {
        "id": "44cb586a79c70d1f",
        "type": "debug",
        "z": "25e707b9e505301b",
        "name": "Debug InfluxDb push",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 120,
        "wires": []
    },
    {
        "id": "cc16f6d578b580a7",
        "type": "ui_form",
        "z": "25e707b9e505301b",
        "name": "Sensor reg",
        "label": "",
        "group": "9c83ea62b28f11e0",
        "order": 0,
        "width": "6",
        "height": "12",
        "options": [
            {
                "label": "Board ID (eui)",
                "value": "board_id",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Sensor ID (I2C addrs)",
                "value": "sensor_id",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Sensor Name",
                "value": "sensor_name",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "The number of measurements",
                "value": "nr_of_measurements",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Quantity(-ies)",
                "value": "quantity",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Unit(s)",
                "value": "unit",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Range",
                "value": "range",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Conversion(s)",
                "value": "conversion",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Datatype(s)",
                "value": "datatype",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "board_id": "",
            "sensor_id": "",
            "sensor_name": "",
            "nr_of_measurements": "",
            "quantity": "",
            "unit": "",
            "range": "",
            "conversion": "",
            "datatype": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic=sensor",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "dd241544415aafb5",
                "a8b8745a5f2b3318"
            ]
        ]
    },
    {
        "id": "dd241544415aafb5",
        "type": "debug",
        "z": "25e707b9e505301b",
        "name": "Debug Sensor reg Form",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 240,
        "wires": []
    },
    {
        "id": "a8b8745a5f2b3318",
        "type": "function",
        "z": "25e707b9e505301b",
        "name": "Data Formatting Board reg",
        "func": "var form = msg.payload\n\nmsg.payload = [\n    {\n        sensor_name: form.sensor_name,\n        nr_of_measurements: form.nr_of_measurements,\n        quantity: form.quantity,\n        unit: form.unit,\n        range: form.range,\n        conversion: form.conversion,\n        datatype: form.datatype,\n        time: new Date()\n    },\n    {\n        board_id: form.board_id,\n        sensor_id: form.sensor_id,\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 200,
        "wires": [
            [
                "3f647c19c2397fd3",
                "a529335b10433a8c"
            ]
        ]
    },
    {
        "id": "e306839c70afbf24",
        "type": "ui_form",
        "z": "25e707b9e505301b",
        "name": "Weather Station reg",
        "label": "",
        "group": "1937d022fe7753c7",
        "order": 0,
        "width": "0",
        "height": "0",
        "options": [
            {
                "label": "Weather Station ID",
                "value": "id",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Weather Station Name",
                "value": "name",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Location latitude",
                "value": "latitude",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Location longitude",
                "value": "longitude",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "id": "",
            "name": "",
            "latitude": "",
            "longitude": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic=weather-station",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "75e44dba2fca0734",
                "49693f99badfb191"
            ]
        ]
    },
    {
        "id": "49693f99badfb191",
        "type": "function",
        "z": "25e707b9e505301b",
        "name": "Data Formatting Weather Station reg",
        "func": "var form = msg.payload\n\nmsg.payload = [\n    {\n        name: form.name,\n        latitude: form.latitude,\n        longitude: form.longitude,\n        time: new Date()\n    },\n    {\n        id: form.id,\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 320,
        "wires": [
            [
                "48d4513b80d4c204",
                "d69d675ca82f9f8e"
            ]
        ]
    },
    {
        "id": "75e44dba2fca0734",
        "type": "debug",
        "z": "25e707b9e505301b",
        "name": "Debug Board reg Form",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 360,
        "wires": []
    },
    {
        "id": "67c30780c95cd428",
        "type": "influxdb out",
        "z": "25e707b9e505301b",
        "influxdb": "f8d7a87b47e3f24c",
        "name": "InfluxDb: baavend-db, org: ap, bucket: sis, measurement: board",
        "measurement": "board",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "ap",
        "bucket": "sis",
        "x": 870,
        "y": 80,
        "wires": []
    },
    {
        "id": "3f647c19c2397fd3",
        "type": "influxdb out",
        "z": "25e707b9e505301b",
        "influxdb": "f8d7a87b47e3f24c",
        "name": "InfluxDb: baavend-db, org: ap, bucket: sis, measurement: sensor",
        "measurement": "sensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "ap",
        "bucket": "sis",
        "x": 870,
        "y": 200,
        "wires": []
    },
    {
        "id": "a529335b10433a8c",
        "type": "debug",
        "z": "25e707b9e505301b",
        "name": "Debug InfluxDb push",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 240,
        "wires": []
    },
    {
        "id": "48d4513b80d4c204",
        "type": "influxdb out",
        "z": "25e707b9e505301b",
        "influxdb": "f8d7a87b47e3f24c",
        "name": "InfluxDb: baavend-db, org: ap, bucket: sis, measurement: weather-station",
        "measurement": "weather-station",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "ap",
        "bucket": "sis",
        "x": 900,
        "y": 320,
        "wires": []
    },
    {
        "id": "d69d675ca82f9f8e",
        "type": "debug",
        "z": "25e707b9e505301b",
        "name": "Debug InfluxDb push",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 360,
        "wires": []
    },
    {
        "id": "7ea46e9fe05546e0",
        "type": "comment",
        "z": "25e707b9e505301b",
        "name": "Step 1. Web Forms",
        "info": "",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "fdfdfcce630fcdf8",
        "type": "comment",
        "z": "25e707b9e505301b",
        "name": "Step 2. Data Formatting",
        "info": "",
        "x": 380,
        "y": 40,
        "wires": []
    },
    {
        "id": "913a82269e5b6e95",
        "type": "comment",
        "z": "25e707b9e505301b",
        "name": "Step 3. Push to InfluxDb database",
        "info": "",
        "x": 760,
        "y": 40,
        "wires": []
    },
    {
        "id": "9727c038192957b1",
        "type": "tab",
        "label": "ttn-flwsb",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "369ec68f45aa0285",
        "type": "mqtt in",
        "z": "9727c038192957b1",
        "name": "",
        "topic": "v3/flwsb@ttn/devices/eui-0004a30b0020da72/up",
        "qos": "2",
        "datatype": "json",
        "broker": "c589162d2aafde08",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 80,
        "wires": [
            [
                "37ad4db926520507",
                "7a5515aac94d63c6"
            ]
        ]
    },
    {
        "id": "37ad4db926520507",
        "type": "debug",
        "z": "9727c038192957b1",
        "name": "Debug TTN msg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 80,
        "wires": []
    },
    {
        "id": "7a5515aac94d63c6",
        "type": "function",
        "z": "9727c038192957b1",
        "name": "Data Formatting",
        "func": "let id = msg.payload.end_device_ids.device_id;\n//var location = msg.payload.locations.frm_payload;\nlet timestamp = new Date(msg.payload.received_at);  // timestamp TTN\n\nfunction base64ToArrayBuffer(value) {\n\tvar load = value.replace(/\\s+/g, '');  // remove any whitespace\n\tvalue = Buffer.from(load, 'base64');\n\treturn value;\n}\n\nlet bitstream = base64ToArrayBuffer(msg.payload.uplink_message.frm_payload);\nnode.warn(bitstream);\n\nmsg.payload = [\n\t[{\n\t\ttemp: ((((bitstream[0] << 8) + bitstream[1])/100)-40),\n\t\tpressure: ((bitstream[2] << 8) + bitstream[3]),\n\t\thumidity: bitstream[4],\n\t\ttime: timestamp\n\t},\n\t{\n\t\tboard_id: id,  // device-id TTN en SIS\n\t\tsensor: \"BME280\"\n\t}],\n\n\t[{\n\t\t//latitude: location.latitude,  // TTN device location latitude\n\t\t//longitude: location.longitude,  // TTN device location longitude\n\t\tconsumed_airtime: +(msg.payload.uplink_message.consumed_airtime.slice(0, -1)), // remove \"s\" and convert to number\n\t\ttime: timestamp\n\t},\n\t{\n\t\tboard_id: id  // device-id TTN en SIS\n\t}]\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 200,
        "wires": [
            [
                "b86504729b55bd04",
                "01d3ae8df075f3a4"
            ]
        ]
    },
    {
        "id": "b86504729b55bd04",
        "type": "influxdb out",
        "z": "9727c038192957b1",
        "influxdb": "f8d7a87b47e3f24c",
        "name": "InfluxDb: baavend-db, org: ap, bucket: flwsb, measurement: climate_data",
        "measurement": "climate_data",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "ap",
        "bucket": "flwsb",
        "x": 520,
        "y": 200,
        "wires": []
    },
    {
        "id": "01d3ae8df075f3a4",
        "type": "debug",
        "z": "9727c038192957b1",
        "name": "Debug InfluxDb push",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.0.0",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 240,
        "wires": []
    },
    {
        "id": "e43a83af44b2ab6c",
        "type": "inject",
        "z": "9727c038192957b1",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "8ada2a42c4a9aa9d"
            ]
        ]
    },
    {
        "id": "8ada2a42c4a9aa9d",
        "type": "function",
        "z": "9727c038192957b1",
        "name": "Fields and Tags example",
        "func": "msg.payload = [{\n    intValue: '10i',\n    numValue: 12,\n    randomValue: Math.random()*10,\n    strValue: \"message2\"\n},\n{\n    tag1:\"board1\",\n    tag2:\"bme280\"\n}];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 440,
        "wires": [
            [
                "a720c5b96d54ae7a"
            ]
        ]
    },
    {
        "id": "45c14ac54bef40dd",
        "type": "influxdb batch",
        "z": "9727c038192957b1",
        "influxdb": "f8d7a87b47e3f24c",
        "precision": "",
        "retentionPolicy": "",
        "name": "baavend-time-db, org: ap, bucket: test-bacth",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "ap",
        "bucket": "test",
        "x": 670,
        "y": 500,
        "wires": []
    },
    {
        "id": "a74671afcc687cc3",
        "type": "inject",
        "z": "9727c038192957b1",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 500,
        "wires": [
            [
                "effedde68a221325"
            ]
        ]
    },
    {
        "id": "effedde68a221325",
        "type": "function",
        "z": "9727c038192957b1",
        "name": "Batch example",
        "func": "msg.payload = [\n    {\n        measurement: \"weather_sensor\",\n        fields: {\n            temp: 5.5,\n            light: 678,\n            humidity: 51\n        },\n        tags: {\n            location: \"garden\"\n        },\n        timestamp: new Date()\n    },\n    {\n        measurement: \"alarm_sensor\",\n        fields: {\n            proximity: 999,\n            temp: 19.5\n        },\n        tags: {\n            location: \"home\"\n        },\n        timestamp: new Date()\n    }\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 500,
        "wires": [
            [
                "45c14ac54bef40dd"
            ]
        ]
    },
    {
        "id": "a720c5b96d54ae7a",
        "type": "influxdb out",
        "z": "9727c038192957b1",
        "influxdb": "f8d7a87b47e3f24c",
        "name": "baavend-time-db, org: ap, bucket: test",
        "measurement": "test",
        "precision": "ms",
        "retentionPolicy": "",
        "database": "test",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "ap",
        "bucket": "test",
        "x": 650,
        "y": 440,
        "wires": []
    },
    {
        "id": "184aa7da251f172e",
        "type": "comment",
        "z": "9727c038192957b1",
        "name": "Step 1. TTN MQTT msg",
        "info": "",
        "x": 140,
        "y": 40,
        "wires": []
    },
    {
        "id": "2c0c1f4a4751d267",
        "type": "comment",
        "z": "9727c038192957b1",
        "name": "Step 2. Data Formatting + Push to database",
        "info": "",
        "x": 210,
        "y": 160,
        "wires": []
    },
    {
        "id": "8ec56f0b7d272e0e",
        "type": "comment",
        "z": "9727c038192957b1",
        "name": "Testing",
        "info": "",
        "x": 90,
        "y": 400,
        "wires": []
    },
    {
        "id": "d03d06af82d1718e",
        "type": "tab",
        "label": "ttn-sis-flwsb",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "151fd00d431caa29",
        "type": "mqtt in",
        "z": "d03d06af82d1718e",
        "name": "",
        "topic": "v3/flwsb@ttn/devices/eui-0004a30b0020da72/up",
        "qos": "2",
        "datatype": "json",
        "broker": "c589162d2aafde08",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 80,
        "wires": [
            [
                "92881eec98883254",
                "cdc3c5d562e15d6c"
            ]
        ]
    },
    {
        "id": "92881eec98883254",
        "type": "debug",
        "z": "d03d06af82d1718e",
        "name": "Debug TTN msg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 120,
        "wires": []
    },
    {
        "id": "9e22e33786704205",
        "type": "function",
        "z": "d03d06af82d1718e",
        "name": "Data Formatting",
        "func": "const ttn = msg.payload[0]; // TTN MQTT msg\nconst sis = msg.payload[1]; // SIS query result msg\n\n// ID & Timestamp from TTN msg\nconst id = ttn.end_device_ids.device_id;\nconst timestamp = new Date(ttn.received_at);  // timestamp TTN\n\n// Board info from SIS query\nconst board_name = (sis.find(obj => obj._field == \"board_name\"))[\"_value\"];\nconst latitude = (sis.find(obj => obj._field == \"latitude\"))[\"_value\"];\nconst longitude = (sis.find(obj => obj._field == \"longitude\"))[\"_value\"];\n// node.warn(`location: ${latitude}, ${longitude}`);  // Debug info\n\n// Bitstream\nfunction base64ToArrayBuffer(value) {\n\tvar load = value.replace(/\\s+/g, '');  // remove any whitespace\n\tvalue = Buffer.from(load, 'base64');\n\treturn value;\n}\n\nconst bitstream = base64ToArrayBuffer(ttn.uplink_message.frm_payload);\nnode.warn(bitstream); // Debug info\n\n// Sensor ID\nconst sensor_id = bitstream[0]; // Only for signle byte ID's\nnode.warn(`sensor_id: ${sensor_id}`); // Debug info\n\n// Sensor info from SIS query by Sensor ID\nconst sensor_name = (sis.find(obj => obj._field == \"sensor_name\" && obj.sensor_id == sensor_id))[\"_value\"];\nconst nr_of_measurements = (sis.find(obj => obj._field == \"nr_of_measurements\" && obj.sensor_id == sensor_id))[\"_value\"];\nconst datatype = (sis.find(obj => obj._field == \"datatype\" && obj.sensor_id == sensor_id))[\"_value\"];\nconst quantity = (sis.find(obj => obj._field == \"quantity\" && obj.sensor_id == sensor_id))[\"_value\"];\nconst conversion = (sis.find(obj => obj._field == \"conversion\" && obj.sensor_id == sensor_id))[\"_value\"];\n\n// Formatting the payload for InfluxDb push\nmsg.payload = [\n\t[{\n\t\tlatitude: latitude,\n\t\tlongitude: longitude,\n\t\tconsumed_airtime: +(ttn.uplink_message.consumed_airtime.slice(0, -1)), // remove \"s\" and convert to number\n\t\ttime: timestamp\n\t},\n\t{\n\t\tboard_id: id,  // device-id TTN en SIS\n\t\tboard_name: board_name,\n\t}]\n];\n\nlet sensor_data = [\n\t{\n\t\t// temp: ((((bitstream[1] << 8) + bitstream[2]) / 100) - 40),\n\t\t// pressure: ((bitstream[3] << 8) + bitstream[4]),\n\t\t// humidity: bitstream[5],\n\t\ttime: timestamp\n\t},\n\t{\n\t\tboard_id: id,  // device-id TTN en SIS\n\t\tsensor_id: sensor_id,\n\t\tsensor_name: sensor_name,\n\t}\n];\n\nif (nr_of_measurements > 1) {\n\t// Sensor info for multiple measurements to Arrays\n\tconst quantities = quantity.split(\", \");\n\tnode.warn(`quantities: ${quantities}`); // Debug info\n\tconst conversions = conversion.split(\", \");\n\tnode.warn(`conversions: ${conversions}`); // Debug info\n\tconst datatypes = datatype.split(\", \");\n\tnode.warn(`datatypes: ${datatypes}`); // Debug info\n\n\t// Define iteration length\n\tlet length = nr_of_measurements;\n\tfor (let i = 1; i < length; i++) { // Skip the first byte(s) of the bitstream, the sensor_id.\n\t\tnode.warn(datatypes[i]);\n\t\tif (!(datatypes[i] == \"byte\")) {\n\t\t\tlength++;\n\t\t}\n\t}\n\tnode.warn(`length: ${length}`); // Debug info\n\n\t// Values array\n\tlet values = [];\n\tfor (let i = 1; i < length; i++) { // Skip the first byte(s) of the bitstream, the sensor_id.\n\t\tnode.warn(datatypes[i]);\n\t\tif (datatypes[i] == \"byte\") {\n\t\t\tvalues[i] = bitstream[i];\n\t\t}\n\t\telse {\n\t\t\tvalues.push((bitstream[i] << 8) + bitstream[i + 1]);\n\t\t\ti++;\n\t\t}\n\t}\n\n\t// Quantities and Measurement data to key value pairs\n\tfor (let i = 0; i < nr_of_measurements; i++) {\n\t\tsensor_data[0][`${quantities[i]}`] = values[i];\n\t}\n\n\t//sensor_data[0][\"test\"] = ((bitstream[3] << 8) + bitstream[4]),\n}\nelse {\n\tif (datatype == \"byte\") {\n\t\tsensor_data[0][`${quantity}`] = bitstream[1];\n\t}\n\telse {\n\t\tsensor_data[0][`${quantity}`] = (bitstream[1] << 8) + bitstream[2];\n\t}\n}\n\nnode.warn(sensor_data[0]); // Debug info\nmsg.payload.push(sensor_data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 420,
        "wires": [
            [
                "5a8f248d95079cb4",
                "669fad0bd9c4421b",
                "df0dd691c566d163"
            ]
        ]
    },
    {
        "id": "df0dd691c566d163",
        "type": "influxdb out",
        "z": "d03d06af82d1718e",
        "influxdb": "f8d7a87b47e3f24c",
        "name": "InfluxDb: baavend-db, org: ap, bucket: flwsb, measurement: climate_data",
        "measurement": "climate_data",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "ap",
        "bucket": "flwsb",
        "x": 780,
        "y": 420,
        "wires": []
    },
    {
        "id": "5a8f248d95079cb4",
        "type": "debug",
        "z": "d03d06af82d1718e",
        "name": "Debug measurements only",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.0.0",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 500,
        "wires": []
    },
    {
        "id": "f02008c5b16c8c19",
        "type": "influxdb in",
        "z": "d03d06af82d1718e",
        "influxdb": "f8d7a87b47e3f24c",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ap",
        "x": 420,
        "y": 260,
        "wires": [
            [
                "772f38a4b942238b",
                "36f87558b5d885e0"
            ]
        ]
    },
    {
        "id": "154876db86b6a254",
        "type": "function",
        "z": "d03d06af82d1718e",
        "name": "InfluxDb Query",
        "func": "const board_id = msg.payload.end_device_ids.device_id;\n\n// Flux query\nmsg.query = `from(bucket: \"sis\")\n  |> range(start: -100y, stop: now())\n  |> filter(fn: (r) => r[\"_measurement\"] == \"sensor\" or r[\"_measurement\"] == \"board\")\n  |> filter(fn: (r) => r[\"board_id\"] == \"${board_id}\")\n  |> filter(fn: (r) => r[\"_field\"] == \"board_name\" or r[\"_field\"] == \"latitude\" or r[\"_field\"] == \"longitude\" or r[\"_field\"] == \"conversion\" or r[\"_field\"] == \"nr_of_measurements\" or r[\"_field\"] == \"quantity\" or r[\"_field\"] == \"sensor_name\" or r[\"_field\"] == \"datatype\")\n  |> aggregateWindow(every: 1y, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 260,
        "wires": [
            [
                "f02008c5b16c8c19"
            ]
        ]
    },
    {
        "id": "772f38a4b942238b",
        "type": "debug",
        "z": "d03d06af82d1718e",
        "name": "Debug InfluxDb Query result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 300,
        "wires": []
    },
    {
        "id": "60a094c65b3b90a7",
        "type": "inject",
        "z": "d03d06af82d1718e",
        "name": "Inject TTN test data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"@type\":\"type.googleapis.com/ttn.lorawan.v3.ApplicationUp\",\"end_device_ids\":{\"device_id\":\"eui-0004a30b0020da72\",\"application_ids\":{\"application_id\":\"flwsb\"},\"dev_eui\":\"0004A30B0020DA72\",\"join_eui\":\"0004A30B0020DA72\",\"dev_addr\":\"260B386C\"},\"correlation_ids\":[\"as:up:01GMZYQEFJ9WFPS1RANANBJK6A\",\"ns:uplink:01GMZYQE8VDPC2WR4K8R9C359Q\",\"pba:conn:up:01GM367NPGXHWVSHN6JFKFKPVR\",\"pba:uplink:01GMZYQE8RVEDGBZC7S9ZJ7RJZ\",\"rpc:/ttn.lorawan.v3.GsNs/HandleUplink:01GMZYQE8VN437T3PHHFFF16ZN\",\"rpc:/ttn.lorawan.v3.NsAs/HandleUplink:01GMZYQEFH6D3MQKT445TBD0ET\"],\"received_at\":\"2022-12-23T16:58:11.314080290Z\",\"uplink_message\":{\"session_key_id\":\"AYU/6AGa+vh+WfbYP5XQGA==\",\"f_port\":1,\"f_cnt\":33,\"frm_payload\":\"CBfUA+kw\",\"decoded_payload\":{\"bytes\":[8,23,212,3,233,48]},\"rx_metadata\":[{\"gateway_ids\":{\"gateway_id\":\"packetbroker\"},\"packet_broker\":{\"message_id\":\"01GMZYQE8RVEDGBZC7S9ZJ7RJZ\",\"forwarder_net_id\":\"000013\",\"forwarder_tenant_id\":\"ttnv2\",\"forwarder_cluster_id\":\"ttn-v2-legacy-eu\",\"forwarder_gateway_eui\":\"7276FF0000062E94\",\"forwarder_gateway_id\":\"eui-7276ff0000062e94\",\"home_network_net_id\":\"000013\",\"home_network_tenant_id\":\"ttn\",\"home_network_cluster_id\":\"eu1.cloud.thethings.network\"},\"time\":\"2022-12-23T16:58:09.998443Z\",\"fine_timestamp\":\"955291031\",\"rssi\":-111,\"signal_rssi\":-113,\"channel_rssi\":-111,\"snr\":1,\"frequency_offset\":\"4464\",\"location\":{\"latitude\":51.22994085,\"longitude\":4.41383496,\"altitude\":30},\"uplink_token\":\"eyJnIjoiWlhsS2FHSkhZMmxQYVVwQ1RWUkpORkl3VGs1VE1XTnBURU5LYkdKdFRXbFBhVXBDVFZSSk5GSXdUazVKYVhkcFlWaFphVTlwU25Oa2F6RkRWakJzYWxJelNtOVBWVnBMVFRJMWRFbHBkMmxrUjBadVNXcHZhVmRYZUZkV1ZGRXlVWHBWTVZKck1IUlZVekV3WWxjMVdFMVhiRmxSVTBvNUxqUlRUMWg1YkU1R01HZG5Ra1EwVnpsTmF6WnJUMEV1TVdnMU9IaGtjMWRNVjFNNU5FSmhTQzVVTW5ONFIxSllWMmxwWlV4NVZYaGpaMGs0UVZSaU9HbFZORGhaZWt4UGNWbEVaRlY2Tlc5SGVrSnBMVU5rYXpJMGRGQkxaVVpMYWpVMWRXNU5Tbk14UTBOd2NpMVRkbTFoT0Y5SGRFTmxTVXRIUzBWNFR6Rm9jMlExVTBoT05HTm1UV3BOV2xFNE5tZGlWRE4zUkZWSWFWTndlazQyYlZkclgyZzFaak5ZUkVablQzVXpUWFZaYlRKMlVqWTNkSEV0UXpBMFNVUnplVFZ5VkVrd1NtdGlWM0JxVkd4RFIwZE1iRnBZZW1OVkxrTklhMVk0V0hCbGRHcEJTa1JpVFRGaVJsaFpSbEU9IiwiYSI6eyJmbmlkIjoiMDAwMDEzIiwiZnRpZCI6InR0bnYyIiwiZmNpZCI6InR0bi12Mi1sZWdhY3ktZXUifX0=\",\"received_at\":\"2022-12-23T16:58:11.093770044Z\"},{\"gateway_ids\":{\"gateway_id\":\"packetbroker\"},\"packet_broker\":{\"message_id\":\"01GMZYQE8RVEDGBZC7S9ZJ7RJZ\",\"forwarder_net_id\":\"000013\",\"forwarder_tenant_id\":\"ttnv2\",\"forwarder_cluster_id\":\"ttn-v2-legacy-eu\",\"forwarder_gateway_eui\":\"7276FF0000062E94\",\"forwarder_gateway_id\":\"eui-7276ff0000062e94\",\"home_network_net_id\":\"000013\",\"home_network_tenant_id\":\"ttn\",\"home_network_cluster_id\":\"eu1.cloud.thethings.network\"},\"antenna_index\":1,\"time\":\"2022-12-23T16:58:09.998443Z\",\"rssi\":-112,\"signal_rssi\":-117,\"channel_rssi\":-112,\"rssi_standard_deviation\":1,\"snr\":-4,\"frequency_offset\":\"4457\",\"uplink_token\":\"eyJnIjoiWlhsS2FHSkhZMmxQYVVwQ1RWUkpORkl3VGs1VE1XTnBURU5LYkdKdFRXbFBhVXBDVFZSSk5GSXdUazVKYVhkcFlWaFphVTlwU25Oa2F6RkRWakJzYWxJelNtOVBWVnBMVFRJMWRFbHBkMmxrUjBadVNXcHZhVmRYZUZkV1ZGRXlVWHBWTVZKck1IUlZVekV3WWxjMVdFMVhiRmxSVTBvNUxqUlRUMWg1YkU1R01HZG5Ra1EwVnpsTmF6WnJUMEV1TVdnMU9IaGtjMWRNVjFNNU5FSmhTQzVVTW5ONFIxSllWMmxwWlV4NVZYaGpaMGs0UVZSaU9HbFZORGhaZWt4UGNWbEVaRlY2Tlc5SGVrSnBMVU5rYXpJMGRGQkxaVVpMYWpVMWRXNU5Tbk14UTBOd2NpMVRkbTFoT0Y5SGRFTmxTVXRIUzBWNFR6Rm9jMlExVTBoT05HTm1UV3BOV2xFNE5tZGlWRE4zUkZWSWFWTndlazQyYlZkclgyZzFaak5ZUkVablQzVXpUWFZaYlRKMlVqWTNkSEV0UXpBMFNVUnplVFZ5VkVrd1NtdGlWM0JxVkd4RFIwZE1iRnBZZW1OVkxrTklhMVk0V0hCbGRHcEJTa1JpVFRGaVJsaFpSbEU9IiwiYSI6eyJmbmlkIjoiMDAwMDEzIiwiZnRpZCI6InR0bnYyIiwiZmNpZCI6InR0bi12Mi1sZWdhY3ktZXUifX0=\",\"received_at\":\"2022-12-23T16:58:11.093770044Z\"}],\"settings\":{\"data_rate\":{\"lora\":{\"bandwidth\":125000,\"spreading_factor\":7,\"coding_rate\":\"4/5\"}},\"frequency\":\"867100000\"},\"received_at\":\"2022-12-23T16:58:11.099382830Z\",\"consumed_airtime\":\"0.051456s\",\"network_ids\":{\"net_id\":\"000013\",\"tenant_id\":\"ttn\",\"cluster_id\":\"eu1\",\"cluster_address\":\"eu1.cloud.thethings.network\"}}}",
        "payloadType": "json",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "cdc3c5d562e15d6c",
                "92881eec98883254"
            ]
        ]
    },
    {
        "id": "078945e4506a75ad",
        "type": "join",
        "z": "d03d06af82d1718e",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 190,
        "y": 420,
        "wires": [
            [
                "e8d41a31d60b8008",
                "9e22e33786704205"
            ]
        ]
    },
    {
        "id": "e8d41a31d60b8008",
        "type": "debug",
        "z": "d03d06af82d1718e",
        "name": "Debug Join result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 460,
        "wires": []
    },
    {
        "id": "cdc3c5d562e15d6c",
        "type": "link out",
        "z": "d03d06af82d1718e",
        "name": "[ttn-sis-flwsb] TTN msg out",
        "mode": "link",
        "links": [
            "51924ef22e27d5eb",
            "d50fffa2683b20be"
        ],
        "x": 475,
        "y": 80,
        "wires": []
    },
    {
        "id": "51924ef22e27d5eb",
        "type": "link in",
        "z": "d03d06af82d1718e",
        "name": "[ttn-sis-flwsb] TTN msg in Query",
        "links": [
            "cdc3c5d562e15d6c"
        ],
        "x": 75,
        "y": 260,
        "wires": [
            [
                "154876db86b6a254"
            ]
        ]
    },
    {
        "id": "d50fffa2683b20be",
        "type": "link in",
        "z": "d03d06af82d1718e",
        "name": "[ttn-sis-flwsb] TTN msg in Join",
        "links": [
            "cdc3c5d562e15d6c"
        ],
        "x": 75,
        "y": 420,
        "wires": [
            [
                "078945e4506a75ad"
            ]
        ]
    },
    {
        "id": "36f87558b5d885e0",
        "type": "link out",
        "z": "d03d06af82d1718e",
        "name": "[ttn-sis-flwsb] Query msg out",
        "mode": "link",
        "links": [
            "0db883d0340e27a7"
        ],
        "x": 575,
        "y": 260,
        "wires": []
    },
    {
        "id": "0db883d0340e27a7",
        "type": "link in",
        "z": "d03d06af82d1718e",
        "name": "[ttn-sis-flwsb] Query msg in",
        "links": [
            "36f87558b5d885e0"
        ],
        "x": 75,
        "y": 460,
        "wires": [
            [
                "078945e4506a75ad"
            ]
        ]
    },
    {
        "id": "90010826df190d03",
        "type": "comment",
        "z": "d03d06af82d1718e",
        "name": "Step 1. TTN MQTT msg",
        "info": "",
        "x": 140,
        "y": 40,
        "wires": []
    },
    {
        "id": "13295339c56a8b2f",
        "type": "comment",
        "z": "d03d06af82d1718e",
        "name": "Step 2. Query SIS from database",
        "info": "",
        "x": 170,
        "y": 220,
        "wires": []
    },
    {
        "id": "5f22a9b13079c98d",
        "type": "comment",
        "z": "d03d06af82d1718e",
        "name": "Step 3. Join MQTT and Query result msg's + Data Formatting + Push to database",
        "info": "",
        "x": 320,
        "y": 380,
        "wires": []
    },
    {
        "id": "eb1568ccbbd672c3",
        "type": "comment",
        "z": "d03d06af82d1718e",
        "name": "Improvements",
        "info": "Now each node added to the TTN application needs to be manually added with a MQTT node.\nThis is due to how the TTN topics work.\nThere needs to be a way to improve this or automating the process.",
        "x": 110,
        "y": 620,
        "wires": []
    },
    {
        "id": "669fad0bd9c4421b",
        "type": "debug",
        "z": "d03d06af82d1718e",
        "name": "Debug InfluxDb push",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 460,
        "wires": []
    },
    {
        "id": "b227e0fee3f5b4d0",
        "type": "tab",
        "label": "weather-station-sis",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "444481b2f8b4208a",
        "type": "mqtt in",
        "z": "b227e0fee3f5b4d0",
        "name": "baavend-mqtt, topic: weatherStation",
        "topic": "weatherStation",
        "qos": "0",
        "datatype": "json",
        "broker": "6bb176ae02eba776",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 80,
        "wires": [
            [
                "1aa38e0ae89987cf",
                "804c0682b9eb29e2"
            ]
        ]
    },
    {
        "id": "1aa38e0ae89987cf",
        "type": "debug",
        "z": "b227e0fee3f5b4d0",
        "name": "Debuq MQTT msg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 120,
        "wires": []
    },
    {
        "id": "9c9dcd373144581e",
        "type": "function",
        "z": "b227e0fee3f5b4d0",
        "name": "Data Formatting",
        "func": "let mqtt = msg.payload[0];\nlet sis = msg.payload[1];\n\nlet source_id = (sis.find(obj => obj.id == mqtt.id))[\"_value\"];\n\nmsg.payload = [\n\t{\n\t\ttemp: mqtt.temperature_C,          // buiten temperatuur, °C, float\n\t\thumidity: mqtt.humidity,           // buiten luchtvochtigheid, %, int\n\t\twind_speed: mqtt.wind_avg_m_s,     // windsnelheid, m/s, float\n\t\twind_gust: mqtt.wind_max_m_s,      // windsnelheid, m/s, float\n\t\twind_direction: mqtt.wind_dir_deg, // windrichting, hoek in graden °, int\n\t\train: mqtt.rain_mm,                // neerslag, mm/10min, float\n\t\ttime: new Date(mqtt.time)\t\t  // timestamp, YYYY-MM-DD hh:mm:ss\n\t},\n\t{\n\t\tsource: source_id\n\t}];\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 420,
        "wires": [
            [
                "f39da89dc495cbd7",
                "70a20184c3e8dcce"
            ]
        ]
    },
    {
        "id": "f39da89dc495cbd7",
        "type": "debug",
        "z": "b227e0fee3f5b4d0",
        "name": "Debug InfluxDb push",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 460,
        "wires": []
    },
    {
        "id": "70a20184c3e8dcce",
        "type": "influxdb out",
        "z": "b227e0fee3f5b4d0",
        "influxdb": "f8d7a87b47e3f24c",
        "name": "",
        "measurement": "weather_station",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "ap",
        "bucket": "flwsb",
        "x": 640,
        "y": 420,
        "wires": []
    },
    {
        "id": "7d776f0ca267b117",
        "type": "influxdb in",
        "z": "b227e0fee3f5b4d0",
        "influxdb": "f8d7a87b47e3f24c",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "ap",
        "x": 420,
        "y": 240,
        "wires": [
            [
                "86aa701fd2bfa92f",
                "d1c855beceadb3b7"
            ]
        ]
    },
    {
        "id": "530341daaed9075a",
        "type": "function",
        "z": "b227e0fee3f5b4d0",
        "name": "InfluxDb Query",
        "func": "msg.query = `from(bucket: \"sis\")\n  |> range(start: -100y, stop: now()) \n  |> filter(fn: (r) => r[\"_measurement\"] == \"weather-station\") \n  |> filter(fn: (r) => r[\"_field\"] == \"name\")\n  |> aggregateWindow(every: 1y, fn: last, createEmpty: false)\n  |> yield(name: \"last\")`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 240,
        "wires": [
            [
                "7d776f0ca267b117"
            ]
        ]
    },
    {
        "id": "86aa701fd2bfa92f",
        "type": "debug",
        "z": "b227e0fee3f5b4d0",
        "name": "Debug InfluxDb Query result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 280,
        "wires": []
    },
    {
        "id": "d3d6e247cfe87b75",
        "type": "inject",
        "z": "b227e0fee3f5b4d0",
        "name": "Test Trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "530341daaed9075a"
            ]
        ]
    },
    {
        "id": "1ffb9ad0cb529c59",
        "type": "join",
        "z": "b227e0fee3f5b4d0",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 190,
        "y": 420,
        "wires": [
            [
                "166339e2edd04e46",
                "9c9dcd373144581e"
            ]
        ]
    },
    {
        "id": "166339e2edd04e46",
        "type": "debug",
        "z": "b227e0fee3f5b4d0",
        "name": "Debug Join result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 460,
        "wires": []
    },
    {
        "id": "804c0682b9eb29e2",
        "type": "link out",
        "z": "b227e0fee3f5b4d0",
        "name": "[weather-station-sis] MQTT msg out",
        "mode": "link",
        "links": [
            "7be21cbd46c881bc",
            "5cbd5916c1774538"
        ],
        "x": 395,
        "y": 80,
        "wires": []
    },
    {
        "id": "5cbd5916c1774538",
        "type": "link in",
        "z": "b227e0fee3f5b4d0",
        "name": "[weather-station-sis] MQTT msg in Query",
        "links": [
            "804c0682b9eb29e2"
        ],
        "x": 75,
        "y": 240,
        "wires": [
            [
                "530341daaed9075a"
            ]
        ]
    },
    {
        "id": "7be21cbd46c881bc",
        "type": "link in",
        "z": "b227e0fee3f5b4d0",
        "name": "[weather-station-sis] MQTT msg in Join",
        "links": [
            "804c0682b9eb29e2"
        ],
        "x": 75,
        "y": 420,
        "wires": [
            [
                "1ffb9ad0cb529c59"
            ]
        ]
    },
    {
        "id": "d1c855beceadb3b7",
        "type": "link out",
        "z": "b227e0fee3f5b4d0",
        "name": "[weather-station-sis] Query msg out",
        "mode": "link",
        "links": [
            "e1ff895f8cd08df1"
        ],
        "x": 575,
        "y": 240,
        "wires": []
    },
    {
        "id": "e1ff895f8cd08df1",
        "type": "link in",
        "z": "b227e0fee3f5b4d0",
        "name": "[weather-station-sis] Query msg in",
        "links": [
            "d1c855beceadb3b7"
        ],
        "x": 75,
        "y": 460,
        "wires": [
            [
                "1ffb9ad0cb529c59"
            ]
        ]
    },
    {
        "id": "d058d7ddb4e206a9",
        "type": "comment",
        "z": "b227e0fee3f5b4d0",
        "name": "Improvements",
        "info": "Gather MQTT msg's over a certain time range.\nCalculate median, or just keep the last values.\nOnly push once every couple of minutes.\nFixes undefined values.",
        "x": 110,
        "y": 660,
        "wires": []
    },
    {
        "id": "0a0714ec288757d0",
        "type": "comment",
        "z": "b227e0fee3f5b4d0",
        "name": "Step 1. MQTT msg",
        "info": "",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "d46ec1b7759f5b5b",
        "type": "comment",
        "z": "b227e0fee3f5b4d0",
        "name": "Step 2. Query SIS from database",
        "info": "",
        "x": 170,
        "y": 200,
        "wires": []
    },
    {
        "id": "087d40ae4e5dcac1",
        "type": "comment",
        "z": "b227e0fee3f5b4d0",
        "name": "Step 3. Join MQTT and Query result msg's + Data Formatting + Push to database",
        "info": "",
        "x": 320,
        "y": 380,
        "wires": []
    },
    {
        "id": "c49ca540c92aa535",
        "type": "tab",
        "label": "mqtt-logging",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "88ae5a3e6d231685",
        "type": "mqtt in",
        "z": "c49ca540c92aa535",
        "name": "",
        "topic": "$SYS/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6bb176ae02eba776",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 80,
        "wires": [
            [
                "c2fc8856cfaa0efc",
                "6d8b2925746e4caa"
            ]
        ]
    },
    {
        "id": "c2fc8856cfaa0efc",
        "type": "debug",
        "z": "c49ca540c92aa535",
        "name": "Debug MQTT msg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 120,
        "wires": []
    },
    {
        "id": "6d8b2925746e4caa",
        "type": "function",
        "z": "c49ca540c92aa535",
        "name": "Data Formatting",
        "func": "var topic = msg.topic;\nvar value = msg.payload;\nvar value_topic = topic.substring(5).replaceAll(\"/\", \"_\");\n\nswitch (topic) {\n\tcase \"$SYS/broker/uptime\":\n\t\tmsg.payload = [\n\t\t\t{\n\t\t\t\tbroker_uptime: +(value.slice(0, -8)), // remove \" seconds\"\n\t\t\t\ttime: new Date()\n\t\t\t},\n\t\t\t{\n\t\t\t\ttopic: topic\n\t\t\t}\n\t\t];\n\t\tbreak;\n\tdefault:\n\t\tmsg.payload = [\n\t\t\t{\n\t\t\t\t[value_topic]: value,\n\t\t\t\ttime: new Date()\n\t\t\t},\n\t\t\t{\n\t\t\t\ttopic: topic\n\t\t\t}\n\t\t];\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 80,
        "wires": [
            [
                "b2f963cb2e58fab4",
                "d1e1a67d1f92a9b3"
            ]
        ]
    },
    {
        "id": "f96ff8ca4b68c5b6",
        "type": "debug",
        "z": "c49ca540c92aa535",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 400,
        "wires": []
    },
    {
        "id": "8ea026f529ab5ed1",
        "type": "join",
        "z": "c49ca540c92aa535",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "38",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 270,
        "y": 340,
        "wires": [
            [
                "f96ff8ca4b68c5b6"
            ]
        ]
    },
    {
        "id": "4aee54704ea53a48",
        "type": "influxdb batch",
        "z": "c49ca540c92aa535",
        "influxdb": "f8d7a87b47e3f24c",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "ap",
        "bucket": "mqtt-logging",
        "x": 440,
        "y": 340,
        "wires": []
    },
    {
        "id": "b2f963cb2e58fab4",
        "type": "debug",
        "z": "c49ca540c92aa535",
        "name": "Debug msg.payload.0",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.0",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 120,
        "wires": []
    },
    {
        "id": "aee0c123fa1e3de2",
        "type": "function",
        "z": "c49ca540c92aa535",
        "name": "function 1",
        "func": "var tmp = msg;\nif (tmp.topic == \"$SYS/broker/uptime\")\n{\n    msg.payload = +(tmp.payload.slice(0, -8));\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 340,
        "wires": [
            [
                "8ea026f529ab5ed1"
            ]
        ]
    },
    {
        "id": "d1e1a67d1f92a9b3",
        "type": "influxdb out",
        "z": "c49ca540c92aa535",
        "influxdb": "f8d7a87b47e3f24c",
        "name": "",
        "measurement": "log",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "ap",
        "bucket": "mqtt-logging",
        "x": 640,
        "y": 80,
        "wires": []
    },
    {
        "id": "ac4d6e45b0044daf",
        "type": "comment",
        "z": "c49ca540c92aa535",
        "name": "Step 1. MQTT msg",
        "info": "",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "ab50765e930df2c2",
        "type": "comment",
        "z": "c49ca540c92aa535",
        "name": "Step 2. Data Formatting + Push to database",
        "info": "",
        "x": 450,
        "y": 40,
        "wires": []
    },
    {
        "id": "2904bfefe6e4a7ee",
        "type": "comment",
        "z": "c49ca540c92aa535",
        "name": "Testing",
        "info": "",
        "x": 90,
        "y": 300,
        "wires": []
    },
    {
        "id": "7b635a347ea0d3df",
        "type": "ui_group",
        "name": "Board Registration",
        "tab": "886221706737a3e1",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9c83ea62b28f11e0",
        "type": "ui_group",
        "name": "Sensor Registration",
        "tab": "886221706737a3e1",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1937d022fe7753c7",
        "type": "ui_group",
        "name": "Weather Station Registration",
        "tab": "886221706737a3e1",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f8d7a87b47e3f24c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "baavend-db",
        "usetls": false,
        "tls": "d50d0c9f.31e858",
        "influxdbVersion": "2.0",
        "url": "http://influx:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "c589162d2aafde08",
        "type": "mqtt-broker",
        "name": "FLWSB",
        "broker": "eu1.cloud.thethings.network",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "6bb176ae02eba776",
        "type": "mqtt-broker",
        "name": "baavend-mqtt",
        "broker": "baavend-mqtt",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "886221706737a3e1",
        "type": "ui_tab",
        "name": "[SIS] Sensor Identification System",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d50d0c9f.31e858",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false
    }
]